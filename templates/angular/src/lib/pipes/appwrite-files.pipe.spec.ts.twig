import { waitForAsync } from '@angular/core/testing';
import { AppwriteAngularModule, AppwriteFilesPipe, AppwriteStorageService } from '@appwrite/angular';
import { MockBuilder, MockInstance, MockRender } from 'ng-mocks';

describe(AppwriteFilesPipe.name, () => {
  const pipe = 'appwriteFiles';
  const mockDocumentId = 'mockDocumentId';
  const mockCollectionId = 'mockCollectionId';
  const mockValue = { test: true };

  const mockFn = jest.fn((fileId: string) => Promise.resolve(mockValue));

  beforeEach(() => MockBuilder(AppwriteFilesPipe, AppwriteAngularModule.forRoot({})));

  beforeAll(() =>
    MockInstance(AppwriteStorageService, {
      init: (instance) => {
        instance.getFile = mockFn;
      },
    })
  );

  it(
    'should get more than one document',
    waitForAsync(async () => {
      const template = `{{ value | ${pipe} | async | json }}`;
      const fixture = MockRender(template, { value: [mockDocumentId, mockDocumentId] });

      fixture.detectChanges();
      await fixture.whenStable();
      fixture.detectChanges();

      const response = JSON.parse(fixture.nativeElement.innerHTML);
      expect(response).toEqual([mockValue, mockValue]);
    })
  );

  it(
    'should pass correct params',
    waitForAsync(async () => {
      mockFn.mockClear();
      const template = `{{ value | ${pipe} | async | json }}`;
      const fixture = MockRender(template, { value: [mockDocumentId, mockDocumentId] });
      fixture.detectChanges();
      await fixture.whenStable();
      fixture.detectChanges();
      expect(mockFn).toHaveBeenCalledWith(mockDocumentId);
      expect(mockFn).toHaveBeenCalledTimes(2);
    })
  );
});

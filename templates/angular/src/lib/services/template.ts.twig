import { Injectable } from '@angular/core';
import { Attribute } from '@appwrite/common';
import { {% for definition in spec.definitions %}{{definition.name|caseUcfirst}}{% if definition.name == 'file'%} as AWFile{% endif %}, {% endfor %} Payload, UploadProgress } from '@appwrite/common';
import { AppwriteException } from '../exceptions';
import { flatten, prepareSearchParams } from '../util';
import { AppwriteService } from './appwrite.service';
{% set added = [] %}
{% for method in service.methods %}
{% for parameter in method.parameters.all %}
{% if parameter.enumValues is not empty %}
{% if parameter.enumName is not empty %}
{% set name = parameter.enumName %}
{% else %}
{% set name = parameter.name %}
{% endif %}
{% if name not in added %}
import { {{ name | caseUcfirst }} } from '@appwrite/common';
{% set added = added|merge([name]) %}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}


@Injectable()
export class Appwrite{{ service.name | caseUcfirst }}Service {
  constructor(private appwriteService: AppwriteService) {}
{% for method in service.methods %}

  /**
   * {{ method.title }}
   *
   {% if method.description %}
{{ method.description|comment3 }}
   {% endif %}
*
   {% for parameter in method.parameters.all %}
* @param {{ '{' }}{{ parameter | getPropertyType(method) | raw }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
   {% endfor %}
* @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
   * @returns {% if method.type != 'location' and method.type != 'webAuth'%}Promise<{{ method | getReturn(spec) | raw }}>{% else %}{{ method | getReturn(spec) | raw }}{% endif %}

   */
  {% if method.type != 'location' and method.type != 'webAuth'%}async {% endif %}{{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable%}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = (progress: UploadProgress) => {}{% endif %}): {% if method.type != 'location' and method.type != 'webAuth'%}Promise<{{ method | getReturn(spec) | raw }}>{% else %}{{ method | getReturn(spec) | raw }}{% endif %} {
    const urlPath = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
    const payload: Payload = { {% for parameter in method.parameters.body %}{{ parameter.name | caseCamel | escapeKeyword }}, {% endfor %} {% for parameter in method.parameters.query %}{{ parameter.name | caseCamel | escapeKeyword }}, {% endfor %} };
{% for parameter in method.parameters.all %}
{% if parameter.required %}

    if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
      throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
    }
{% endif %}
{% endfor %}

{% if method.type == 'location' or method.type == 'webAuth' %}
            const uri = new URL(this.appwriteService.config.endpoint + urlPath);
{% if method.auth|length > 0 %}
{% for node in method.auth %}
{% for key,header in node|keys %}
            payload['{{header|caseLower}}'] = this.appwriteService.config.{{header|caseLower}};
{% endfor %}
{% endfor %}
{% endif %}
            prepareSearchParams(uri, payload);
{% endif %}
{% if method.type == 'webAuth' %}

            if (typeof window !== 'undefined' && window?.location) {
                window.location.href = uri.toString();
            } else {
                return uri;
            }
{% elseif method.type == 'location' %}

            return uri;
{% else %}
{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}

            if(!({{ parameter.name | caseCamel | escapeKeyword }} instanceof File)) {
                throw new {{spec.title | caseUcfirst}}Exception('Parameter "{{ parameter.name | caseCamel | escapeKeyword }}" has to be a File.');
            }

            const fileSize = {{ parameter.name | caseCamel | escapeKeyword }}.size;

            if (fileSize <= AppwriteService.CHUNK_SIZE) {
                return await this.appwriteService.call('{{ method.method | caseUpper }}', urlPath, { {% for parameter in method.parameters.header %}
'{{ parameter.name | caseCamel | escapeKeyword }}': this.appwriteService.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
'{{ key }}': '{{ header }}',
{% endfor %} }, payload);
            }

            let start = 0;
            let response = null;

            const headers: { [header: string]: string } = {
{% for parameter in method.parameters.header %}
                '{{ parameter.name | caseCamel | escapeKeyword }}': this.appwriteService.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            }




            while (start < fileSize) {
                let end = start + AppwriteService.CHUNK_SIZE; // Prepare end for the next chunk
                if (end >= fileSize) {
                  end = fileSize; // Adjust for the last chunk to include the last byte
                }
          
                headers['content-range'] = `bytes ${start}-${end - 1}/${ fileSize}`;
          
                const chunk = {{ parameter.name | caseCamel | escapeKeyword }}.slice(start, end);
          
                let newPayload = { ...payload, file: new File([chunk], {{ parameter.name | caseCamel | escapeKeyword }}.name) };
          
                response = await this.appwriteService.call('{{ method.method | caseUpper }}', urlPath, headers, newPayload);
          
                if (response && response.$id) {
                  headers['x-{{spec.title | caseLower }}-id'] = response.$id;
                }
          
                if (onProgress && typeof onProgress === 'function') {
                  onProgress({
                    $id: response.$id,
                    progress: Math.round((end / fileSize) * 100),
                    sizeUploaded: end,
                    chunksTotal: Math.ceil(fileSize / AppwriteService.CHUNK_SIZE),
                    chunksUploaded: Math.ceil(end / AppwriteService.CHUNK_SIZE),
                  });
                }
          
                start = end;
              }

            return response;
{% endif %}
{% endfor %}
{% else %}
    return this.appwriteService.call<{{method | getReturn(spec) | raw}}>('{{method.method | caseUpper}}', urlPath, {% apply spaceless %}{
{%- for parameter in method.parameters.header %}
                '{{ parameter.name | caseCamel | escapeKeyword }}': this.appwriteService.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor -%}
{#
{%- for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor -%}
#}
{% endapply %}
}, payload);
{% endif %}
{% endif %}
  }
{% endfor %}
}